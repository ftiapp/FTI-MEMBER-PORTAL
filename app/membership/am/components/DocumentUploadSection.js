// components/DocumentUploadSection.js
"use client";

import { useState, useEffect } from "react";
import ImageEditor from "../../components/DocumentUpload/ImageEditor";
import SingleFileUploadZone from "../../components/DocumentUpload/SingleFileUploadZone";
import {
  createFileObject,
  validateFileSize,
  validateFileType,
  getImageEditorTitle,
} from "../../components/DocumentUpload/fileUtils";
import {
  DocumentIcon,
  UsersIcon,
  ShieldIcon,
  PhotoIcon,
} from "../../components/DocumentUpload/IconComponents";

export default function DocumentUploadSection({ formData, setFormData, errors }) {
  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å formData ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ
  const [selectedFiles, setSelectedFiles] = useState({
    associationCertificate: formData.associationCertificate || null,
    memberList: formData.memberList || null,
    companyStamp: formData.companyStamp || null,
    authorizedSignature: formData.authorizedSignature || null,
    attachmentDocument: formData.attachmentDocument || null,
  });

  // Image editor states
  const [showImageEditor, setShowImageEditor] = useState(false);
  const [editingImage, setEditingImage] = useState(null);
  const [editingType, setEditingType] = useState(""); // 'companyStamp' or 'authorizedSignature'

  // Debug: ‡πÄ‡∏û‡∏¥‡πà‡∏° useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
  useEffect(() => {
    console.log("=== DEBUG AM DocumentUploadSection ===");
    console.log("formData.companyStamp:", formData.companyStamp);
    console.log("formData.authorizedSignature:", formData.authorizedSignature);
    console.log("selectedFiles:", selectedFiles);
    console.log("errors:", errors);
  }, [formData.companyStamp, formData.authorizedSignature, selectedFiles, errors]);

  // Sync selectedFiles with formData when component mounts or formData changes
  useEffect(() => {
    setSelectedFiles({
      associationCertificate: formData.associationCertificate || null,
      memberList: formData.memberList || null,
      companyStamp: formData.companyStamp || null,
      authorizedSignature: formData.authorizedSignature || null,
      attachmentDocument: formData.attachmentDocument || null,
    });
  }, [formData]);

  const handleFileChange = (e, documentType) => {
    const { files } = e.target;
    if (files && files[0]) {
      const file = files[0];

      if (!validateFileSize(file)) {
        alert("‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB");
        return;
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö companyStamp ‡πÅ‡∏•‡∏∞ authorizedSignature ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (documentType === "companyStamp" || documentType === "authorizedSignature") {
        if (!validateFileType(file, ["image/jpeg", "image/jpg", "image/png"])) {
          alert("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (JPG, JPEG ‡∏´‡∏£‡∏∑‡∏≠ PNG)");
          return;
        }

        // ‡πÄ‡∏õ‡∏¥‡∏î Image Editor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        setEditingImage(file);
        setEditingType(documentType);
        setShowImageEditor(true);
      } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á PDF ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        const allowedTypes = ["application/pdf", "image/jpeg", "image/jpg", "image/png"];
        if (!validateFileType(file, allowedTypes)) {
          alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó PDF, JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
          return;
        }

        console.log(`üìÅ Selected file for ${documentType}:`, file.name, file.size, file.type);

        setSelectedFiles((prev) => ({ ...prev, [documentType]: file }));
        setFormData((prev) => ({ ...prev, [documentType]: file }));
      }
    }
  };

  const handleImageSave = (blob) => {
    const file = new File([blob], `${editingType}.png`, { type: "image/png" });
    setSelectedFiles((prev) => ({ ...prev, [editingType]: file }));
    setFormData((prev) => ({ ...prev, [editingType]: file }));
    setShowImageEditor(false);
    setEditingImage(null);
    setEditingType("");
  };

  const editImage = (documentType) => {
    const file = selectedFiles[documentType];
    if (file) {
      setEditingImage(file);
      setEditingType(documentType);
      setShowImageEditor(true);
    }
  };

  const removeFile = (documentType) => {
    setSelectedFiles((prev) => ({ ...prev, [documentType]: null }));
    setFormData((prev) => ({ ...prev, [documentType]: null }));
  };



  return (
    <div>
      <div className="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-blue-600 to-blue-700 px-8 py-8">
          <h2 className="text-2xl font-bold text-white tracking-tight">‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h2>
          <p className="text-blue-100 text-base mt-2">
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤
          </p>
        </div>

        {/* Content Section */}
        <div className="px-8 py-8 space-y-8">
          {/* Required Documents Notice */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-6 w-6 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                  <path
                    fillRule="evenodd"
                    d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                    clipRule="evenodd"
                  />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-base font-semibold text-blue-900 mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</h3>
                <p className="text-sm text-blue-800 mb-2">
                  <strong>‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô</strong> ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF, JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG
                  ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB
                </p>
                <p className="text-sm text-blue-800">
                  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°: ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤
                  ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏°‡∏≤‡∏Ñ‡∏°
                </p>
              </div>
            </div>
          </div>

          {/* Document Upload Section - ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ */}
          <div className="bg-gray-50 border border-gray-200 rounded-xl p-8">
            <div className="text-center mb-10">
              <div className="inline-flex items-center gap-3 px-6 py-3 bg-white border border-blue-200 rounded-full shadow-sm">
                <svg
                  className="w-5 h-5 text-blue-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                  />
                </svg>
                <span className="text-base font-semibold text-blue-800">
                  ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á / Certification Documents *
                </span>
              </div>
            </div>

            {/* Association Certificate Upload */}
            <div data-error-key="associationCertificate">
              <SingleFileUploadZone
                title="‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ / Association Registration Certificate *"
                description="‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á "
                name="associationCertificate"
                file={selectedFiles.associationCertificate}
                icon={DocumentIcon}
                iconColor="text-blue-600"
                bgColor="bg-blue-100"
                error={errors?.associationCertificate}
                onFileChange={handleFileChange}
                onRemoveFile={removeFile}
              />
            </div>

            {/* Member List Upload */}
            <div data-error-key="memberList">
              <SingleFileUploadZone
                title="‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏°‡∏≤‡∏Ñ‡∏° / Association Member List *"
                description="‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
                name="memberList"
                file={selectedFiles.memberList}
                icon={UsersIcon}
                iconColor="text-blue-600"
                bgColor="bg-blue-100"
                error={errors?.memberList}
                onFileChange={handleFileChange}
                onRemoveFile={removeFile}
              />
            </div>
          </div>

          {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô */}
          <div className="h-12"></div>

          {/* Document Upload Section - ‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô */}
          <div className="bg-gray-50 border border-gray-200 rounded-xl p-8">
            <div className="text-center mb-10">
              <div className="inline-flex items-center gap-3 px-6 py-3 bg-white border border-blue-200 rounded-full shadow-sm">
                <svg
                  className="w-5 h-5 text-blue-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
                  />
                </svg>
                <span className="text-base font-semibold text-blue-800">
                  ‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô / Stamp and Signature
                </span>
              </div>
            </div>

            {/* Required Documents Notice */}
            <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-8">
              <div className="flex items-center gap-2">
                <span className="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                  ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                </span>
                <span className="text-sm text-red-700 font-medium">
                  ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                </span>
              </div>
            </div>

            {/* Company Stamp Upload - Required */}
            <div className="space-y-3" data-error-key="companyStamp">
              <SingleFileUploadZone
                title="‡∏£‡∏π‡∏õ‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏Ñ‡∏° / Association Stamp Image *"
                description="‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏Ñ‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) / Photo of association stamp or signature image if no stamp available (required)"
                name="companyStamp"
                file={selectedFiles.companyStamp}
                icon={ShieldIcon}
                iconColor="text-blue-600"
                bgColor="bg-blue-100"
                error={errors?.companyStamp}
                isImageRequired={true}
                onFileChange={handleFileChange}
                onRemoveFile={removeFile}
                onEditImage={editImage}
              />
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <div className="flex items-start gap-2">
                  <svg
                    className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  <div className="text-xs">
                    <p className="font-medium text-blue-800 mb-2">
                      ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: 300x300 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•, ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ (PNG)
                    </p>
                    <div className="flex gap-4">
                      <a
                        href="/images/FTI-LOGOsample.png"
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800 underline"
                      >
                        ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Authorized Signatory Name Fields */}
            <div className="bg-white border border-gray-200 rounded-xl p-6 mb-6">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <svg
                    className="w-4 h-4 text-blue-600"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                    />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900">
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏•‡∏á‡∏ô‡∏≤‡∏° / Authorized Signatory Information
                </h3>
                <p className="text-sm text-gray-600 mt-2">
                  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© / Please
                  enter name and position of authorized signatory in both Thai and English
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                {/* ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏ó‡∏¢) */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ <span className="text-red-500">*</span>
                  </label>
                  <select
                    value={formData.authorizedSignatoryPrenameTh || ""}
                    onChange={(e) => {
                      const value = e.target.value;
                      const mapThToEn = { ‡∏ô‡∏≤‡∏¢: "Mr", ‡∏ô‡∏≤‡∏á: "Mrs", ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß: "Ms", ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: "Other" };
                      const mappedEn = mapThToEn[value] || "";
                      setFormData((prev) => ({
                        ...prev,
                        authorizedSignatoryPrenameTh: value,
                        authorizedSignatoryPrenameEn: mappedEn,
                        authorizedSignatoryPrenameOther:
                          value === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ? prev.authorizedSignatoryPrenameOther || "" : "",
                        authorizedSignatoryPrenameOtherEn:
                          mappedEn === "Other" ? prev.authorizedSignatoryPrenameOtherEn || "" : "",
                      }));
                    }}
                    className="w-full px-4 py-3 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</option>
                    <option value="‡∏ô‡∏≤‡∏¢">‡∏ô‡∏≤‡∏¢</option>
                    <option value="‡∏ô‡∏≤‡∏á">‡∏ô‡∏≤‡∏á</option>
                    <option value="‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß">‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß</option>
                    <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                  </select>
                  {formData.authorizedSignatoryPrenameTh === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" && (
                    <div className="mt-2">
                      <input
                        type="text"
                        value={formData.authorizedSignatoryPrenameOther || ""}
                        onChange={(e) =>
                          setFormData((prev) => ({
                            ...prev,
                            authorizedSignatoryPrenameOther: e.target.value.replace(
                              /[^‡∏Å-‡πô\.\s]/g,
                              "",
                            ),
                          }))
                        }
                        placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏®.‡∏î‡∏£."
                        className={`w-full px-4 py-3 text-sm border rounded-lg focus:outline-none focus:ring-2 ${errors?.authorizedSignatoryPrenameOther ? "border-red-300 focus:ring-red-200" : "border-gray-300 focus:ring-blue-500"}`}
                        required
                      />
                      {errors?.authorizedSignatoryPrenameOther && (
                        <p className="mt-1 text-xs text-red-600 flex items-center">
                          <span className="mr-1">*</span>
                          {errors.authorizedSignatoryPrenameOther}
                        </p>
                      )}
                    </div>
                  )}
                </div>

                {/* ‡∏ä‡∏∑‡πà‡∏≠ (‡πÑ‡∏ó‡∏¢) */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏ä‡∏∑‡πà‡∏≠ <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    value={formData.authorizedSignatoryFirstNameTh || ""}
                    onChange={(e) =>
                      setFormData((prev) => ({
                        ...prev,
                        authorizedSignatoryFirstNameTh: e.target.value,
                      }))
                    }
                    data-error-key="authorizedSignatoryFirstNameTh"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏ä‡∏≤‡∏¢"
                    className={`w-full px-4 py-3 text-sm border rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors?.authorizedSignatoryFirstNameTh ? "border-red-300 bg-red-50" : "border-gray-300 hover:border-gray-400"}`}
                    required
                  />
                  {errors?.authorizedSignatoryFirstNameTh && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.authorizedSignatoryFirstNameTh}
                    </p>
                  )}
                </div>

                {/* ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÑ‡∏ó‡∏¢) */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    value={formData.authorizedSignatoryLastNameTh || ""}
                    onChange={(e) =>
                      setFormData((prev) => ({
                        ...prev,
                        authorizedSignatoryLastNameTh: e.target.value,
                      }))
                    }
                    data-error-key="authorizedSignatoryLastNameTh"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏à‡∏î‡∏µ"
                    className={`w-full px-4 py-3 text-sm border rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors?.authorizedSignatoryLastNameTh ? "border-red-300 bg-red-50" : "border-gray-300 hover:border-gray-400"}`}
                    required
                  />
                  {errors?.authorizedSignatoryLastNameTh && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.authorizedSignatoryLastNameTh}
                    </p>
                  )}
                </div>

                {/* ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÑ‡∏ó‡∏¢) */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    value={formData.authorizedSignatoryPositionTh || ""}
                    onChange={(e) =>
                      setFormData((prev) => ({
                        ...prev,
                        authorizedSignatoryPositionTh: e.target.value,
                      }))
                    }
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£"
                    className={`w-full px-4 py-3 text-sm border rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors?.authorizedSignatoryPositionTh ? "border-red-300 bg-red-50" : "border-gray-300 hover:border-gray-400"}`}
                  />
                  {errors?.authorizedSignatoryPositionTh && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.authorizedSignatoryPositionTh}
                    </p>
                  )}
                </div>

                {/* Prename (EN) - Hidden */}
                <div className="hidden">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Prename (EN)
                  </label>
                  <select
                    value={formData.authorizedSignatoryPrenameEn || ""}
                    onChange={(e) => {
                      const value = e.target.value;
                      const mapEnToTh = { Mr: "‡∏ô‡∏≤‡∏¢", Mrs: "‡∏ô‡∏≤‡∏á", Ms: "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß", Other: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" };
                      const mappedTh = mapEnToTh[value] || "";
                      setFormData((prev) => ({
                        ...prev,
                        authorizedSignatoryPrenameEn: value,
                        authorizedSignatoryPrenameTh: mappedTh,
                        authorizedSignatoryPrenameOtherEn:
                          value === "Other" ? prev.authorizedSignatoryPrenameOtherEn || "" : "",
                        authorizedSignatoryPrenameOther:
                          mappedTh === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ? prev.authorizedSignatoryPrenameOther || "" : "",
                      }));
                    }}
                    className="w-full px-4 py-3 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Select</option>
                    <option value="Mr">Mr</option>
                    <option value="Mrs">Mrs</option>
                    <option value="Ms">Ms</option>
                    <option value="Other">Other</option>
                  </select>
                  {formData.authorizedSignatoryPrenameEn === "Other" && (
                    <input
                      type="text"
                      value={formData.authorizedSignatoryPrenameOtherEn || ""}
                      onChange={(e) =>
                        setFormData((prev) => ({
                          ...prev,
                          authorizedSignatoryPrenameOtherEn: e.target.value.replace(
                            /[^a-zA-Z\.\s]/g,
                            "",
                          ),
                        }))
                      }
                      placeholder="e.g., Assoc. Prof., Dr."
                      className="mt-2 w-full px-4 py-3 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  )}
                </div>

                {/* First Name (EN) - Hidden */}
                <div className="hidden">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    First Name (EN) <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    value={formData.authorizedSignatoryFirstNameEn || ""}
                    onChange={(e) =>
                      setFormData((prev) => ({
                        ...prev,
                        authorizedSignatoryFirstNameEn: e.target.value,
                      }))
                    }
                    data-error-key="authorizedSignatoryFirstNameEn"
                    placeholder="e.g., Somchai"
                    className={`w-full px-4 py-3 text-sm border rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors?.authorizedSignatoryFirstNameEn ? "border-red-300 bg-red-50" : "border-gray-300 hover:border-gray-400"}`}
                  />
                  {errors?.authorizedSignatoryFirstNameEn && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.authorizedSignatoryFirstNameEn}
                    </p>
                  )}
                </div>

                {/* Last Name (EN) - Hidden */}
                <div className="hidden">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Last Name (EN) <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    value={formData.authorizedSignatoryLastNameEn || ""}
                    onChange={(e) =>
                      setFormData((prev) => ({
                        ...prev,
                        authorizedSignatoryLastNameEn: e.target.value,
                      }))
                    }
                    data-error-key="authorizedSignatoryLastNameEn"
                    placeholder="e.g., Jaidee"
                    className={`w-full px-4 py-3 text-sm border rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors?.authorizedSignatoryLastNameEn ? "border-red-300 bg-red-50" : "border-gray-300 hover:border-gray-400"}`}
                  />
                  {errors?.authorizedSignatoryLastNameEn && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.authorizedSignatoryLastNameEn}
                    </p>
                  )}
                </div>

                {/* Position (EN) - Hidden */}
                <div className="hidden">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Position (EN)
                  </label>
                  <input
                    type="text"
                    value={formData.authorizedSignatoryPositionEn || ""}
                    onChange={(e) =>
                      setFormData((prev) => ({
                        ...prev,
                        authorizedSignatoryPositionEn: e.target.value,
                      }))
                    }
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${
                      errors?.authorizedSignatoryPositionEn
                        ? "border-red-300 bg-red-50"
                        : "border-gray-300"
                    }`}
                    placeholder="e.g. Managing Director"
                  />
                  {errors?.authorizedSignatoryPositionEn && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.authorizedSignatoryPositionEn}
                    </p>
                  )}
                </div>
              </div>
            </div>

            {/* Authorized Signature Upload */}
            <div className="space-y-3">
              <SingleFileUploadZone
                title="‡∏£‡∏π‡∏õ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏•‡∏á‡∏ô‡∏≤‡∏° *"
                description="‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏Ñ‡∏° (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)"
                name="authorizedSignature"
                file={selectedFiles.authorizedSignature}
                icon={PhotoIcon}
                iconColor="text-blue-600"
                bgColor="bg-blue-100"
                error={errors?.authorizedSignature}
                isImageRequired={true}
                onFileChange={handleFileChange}
                onRemoveFile={removeFile}
                onEditImage={editImage}
              />
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <div className="flex items-start gap-2">
                  <svg
                    className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  <div className="text-xs">
                    <p className="font-medium text-blue-800 mb-2">
                      ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: 120x60 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•, ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ (PNG)
                    </p>
                    <div className="flex gap-4">
                      <a
                        href="/images/FTI-SIGNATUREsample.jpg"
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800 underline"
                      >
                        ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
                      </a>
                    </div>
                  </div>
                </div>
              </div>

              {/* Attachment Document Upload */}
              <div className="space-y-3">
                <SingleFileUploadZone
                  title="‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö"
                  description="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ : ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏á‡∏ô‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏ï‡∏£‡∏≤‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤"
                  name="attachmentDocument"
                  file={selectedFiles.attachmentDocument}
                  icon={DocumentIcon}
                  iconColor="text-blue-600"
                  bgColor="bg-blue-100"
                  error={errors?.attachmentDocument}
                  isImageRequired={false}
                  onFileChange={handleFileChange}
                  onRemoveFile={removeFile}
                />
              </div>
            </div>
          </div>

          {/* Image Editor Modal */}
          <div>
            <ImageEditor
              isOpen={showImageEditor}
              onClose={() => setShowImageEditor(false)}
              onSave={handleImageSave}
              initialImage={editingImage}
              title={getImageEditorTitle(editingType)}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

