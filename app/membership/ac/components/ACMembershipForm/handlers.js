// Event Handlers for AC Membership Form
import { toast } from "react-hot-toast";
import { validateACForm } from "../ACFormValidation";
import { submitACMembershipForm } from "../ACFormSubmission";
import { checkTaxIdUniqueness } from "../../../utils/taxIdValidator";
import { deleteDraftByTaxId, saveDraftData } from "../../../utils/draftHelpers";
import { STEPS } from "./constants";
import { getFirstFieldError } from "./scrollHelpers";

/**
 * Validate Tax ID
 */
export const createValidateTaxId = (abortControllerRef, setTaxIdValidating) => async (taxId) => {
  if (!taxId || taxId.length !== 13) {
    return { isUnique: false, message: "‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
  }

  if (abortControllerRef.current) {
    abortControllerRef.current.abort();
  }
  abortControllerRef.current = new AbortController();

  try {
    setTaxIdValidating(true);
    const result = await checkTaxIdUniqueness(taxId, "ac", abortControllerRef.current.signal);
    setTaxIdValidating(false);
    return result;
  } catch (error) {
    if (error.name === "AbortError") throw error;
    setTaxIdValidating(false);
    return { isUnique: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" };
  }
};

/**
 * Handle saving draft for AC membership
 */
export const createHandleSaveDraft = (formData, currentStep) => async () => {
  return await saveDraftData(formData, "ac", currentStep, "taxId");
};

/**
 * Handle form submission
 */
export const createHandleSubmit =
  ({
    formData,
    currentStep,
    totalSteps,
    isSinglePageLayout,
    setErrors,
    setIsSubmitting,
    setCurrentStep,
    validateTaxId,
    scrollToErrorField,
    consentAgreed,
    rejectionId,
    userComment,
    industrialGroups,
    provincialChapters,
    setSubmissionResult,
    setShowSuccessModal,
    router,
  }) =>
  async (e) => {
    if (e) e.preventDefault();
    setIsSubmitting(true);

    try {
      // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      if (!isSinglePageLayout && currentStep < totalSteps) {
        const formErrors = validateACForm(formData, currentStep);
        console.log("üîç AC Form validation errors for step", currentStep, ":", formErrors);
        setErrors(formErrors);

        if (Object.keys(formErrors).length > 0) {
          // If representative step has errors, let the child component handle scroll AND toast (avoid duplicate)
          if (currentStep === 2 && formErrors.representativeErrors) {
            // Child component (RepresentativeInfoSection) will handle both scroll and toast
            setIsSubmitting(false);
            return;
          }

          // If business info step has errors, let the child component handle scroll AND toast (avoid duplicate)
          if (
            currentStep === 3 &&
            (formErrors.businessTypes ||
              formErrors.otherBusinessTypeDetail ||
              formErrors.products ||
              formErrors.productErrors)
          ) {
            // Child component (BusinessInfoSection) will handle both scroll and toast
            setIsSubmitting(false);
            return;
          }

          const { key: firstSpecificKey, message: firstSpecificMessage } =
            getFirstFieldError(formErrors);
          const firstMessage = firstSpecificMessage || "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
          toast.error(firstMessage);

          // ‡∏ñ‡πâ‡∏≤ error ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢ (‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
          const companyBasicFields = [
            "companyName",
            "companyNameEn",
            "taxId",
            "registrationNumber",
            "registrationDate",
            // Note: companyEmail, companyPhone, companyWebsite are fallback fields only, not validated
          ];
          if (firstSpecificKey && companyBasicFields.includes(firstSpecificKey)) {
            scrollToErrorField(firstSpecificKey);
            setIsSubmitting(false);
            return;
          }

          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö representativeErrors
          if (formErrors.representativeErrors && Array.isArray(formErrors.representativeErrors)) {
            const repIndex = formErrors.representativeErrors.findIndex(
              (e) => e && Object.keys(e).length > 0,
            );
            if (repIndex !== -1) {
              const field = Object.keys(formErrors.representativeErrors[repIndex])[0];
              scrollToErrorField(`rep-${repIndex}-${field}`);
              setIsSubmitting(false);
              return;
            }
          }

          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö addresses (errors.addresses[type].field)
          if (formErrors.addresses && typeof formErrors.addresses === "object") {
            const typeKeys = Object.keys(formErrors.addresses).filter((k) => k !== "_error");
            const firstType = typeKeys.find(
              (t) => formErrors.addresses[t] && Object.keys(formErrors.addresses[t]).length > 0,
            );
            if (firstType) {
              const fieldKeys = Object.keys(formErrors.addresses[firstType]).filter(
                (k) => k !== "base",
              );
              const firstField = fieldKeys[0];
              if (firstField) {
                scrollToErrorField(`addresses.${firstType}.${firstField}`);
                setIsSubmitting(false);
                return;
              }
            }
          }

          // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á field ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ error (‡πÉ‡∏ä‡πâ specific key ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          if (firstSpecificKey) {
            scrollToErrorField(firstSpecificKey);
          }
          setIsSubmitting(false);
          return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Tax ID ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1
        if (currentStep === 1 && formData.taxId && formData.taxId.length === 13) {
          console.log("üîµ Checking Tax ID uniqueness for:", formData.taxId);
          const taxIdResult = await validateTaxId(formData.taxId);
          console.log("üîç Tax ID validation result:", taxIdResult);

          if (!taxIdResult.isUnique) {
            console.log("‚ùå Tax ID is NOT unique, blocking progression");
            setIsSubmitting(false);
            toast.error(taxIdResult.message);
            return;
          }

          console.log("‚úÖ Tax ID is unique, continuing to next step");
        } else if (currentStep === 1) {
          console.log("‚ö†Ô∏è Step 1 but tax ID is missing or not 13 digits:", formData.taxId);
        }

        console.log("‚úÖ Step validation passed, moving to next step");
        // Increment step directly to avoid re-validating with possibly different internal step in navigation hook
        if (setCurrentStep) {
          setCurrentStep((prev) => prev + 1);
          window.scrollTo(0, 0);
        }
        setIsSubmitting(false);
        return;
      }

      // Continue with the rest of the function for final submission
    } catch (error) {
      console.error("Error during form validation or navigation:", error);
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      setIsSubmitting(false);
      return;
    }

    // --- Final Submission Logic (currentStep === 5) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ---
    console.log("üîÑ Final submission for step-by-step mode");

    const formErrors = validateACForm(formData, STEPS.length);
    setErrors(formErrors);

    if (Object.keys(formErrors).length > 0) {
      console.log("‚ùå Final validation errors:", formErrors);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á error message ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö representatives
      let errorMessage = "";
      let errorCount = 0;

      if (formErrors.representativeErrors && Array.isArray(formErrors.representativeErrors)) {
        const repErrors = formErrors.representativeErrors;
        const repErrorDetails = [];

        repErrors.forEach((repError, index) => {
          if (repError && Object.keys(repError).length > 0) {
            const fieldNames = Object.keys(repError)
              .map((key) => {
                const fieldMap = {
                  prename_th: "‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠ (‡πÑ‡∏ó‡∏¢)",
                  prename_en: "‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)",
                  firstNameThai: "‡∏ä‡∏∑‡πà‡∏≠ (‡πÑ‡∏ó‡∏¢)",
                  lastNameThai: "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÑ‡∏ó‡∏¢)",
                  firstNameEnglish: "‡∏ä‡∏∑‡πà‡∏≠ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)",
                  lastNameEnglish: "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)",
                  email: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
                  phone: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
                  position: "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á",
                };
                return fieldMap[key] || key;
              })
              .join(", ");

            repErrorDetails.push(`‡∏ú‡∏π‡πâ‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà ${index + 1}: ${fieldNames}`);
            errorCount += Object.keys(repError).length;
          }
        });

        if (repErrorDetails.length > 0) {
          errorMessage = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏ó‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:\n${repErrorDetails.join("\n")}`;
        }
      }

      // ‡∏ô‡∏±‡∏ö errors ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà representativeErrors
      const otherErrorCount = Object.keys(formErrors).filter(
        (key) => key !== "representativeErrors",
      ).length;
      errorCount += otherErrorCount;

      if (!errorMessage) {
        const { message: firstSpecificMessage } = getFirstFieldError(formErrors);
        errorMessage =
          firstSpecificMessage ||
          `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`;
      } else if (otherErrorCount > 0) {
        errorMessage += `\n\n‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏≠‡∏µ‡∏Å ${otherErrorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
      }

      toast.error(errorMessage, { duration: 7000 });

      const firstErrorStep = STEPS.find(
        (step) => Object.keys(validateACForm(formData, step.id)).length > 0,
      );
      if (firstErrorStep && setCurrentStep) {
        setCurrentStep(firstErrorStep.id);
        // ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡πÄ‡∏ï‡πá‡∏õ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡πÄ‡∏ï‡πá‡∏õ‡∏ô‡∏±‡πâ‡∏ô
        const stepErrors = validateACForm(formData, firstErrorStep.id);
        // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏£‡∏Å‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó -> ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà -> ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠)
        const { key: stepFirstKey } = getFirstFieldError(stepErrors);
        const companyBasicFields = [
          "companyName",
          "companyNameEn",
          "taxId",
          "registrationNumber",
          "registrationDate",
          // Note: companyEmail, companyPhone, companyWebsite are fallback fields only, not validated
        ];

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        if (stepFirstKey && companyBasicFields.includes(stepFirstKey)) {
          setTimeout(() => scrollToErrorField(stepFirstKey), 350);
          setIsSubmitting(false);
          return;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô representative ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©
        if (stepErrors.representativeErrors && Array.isArray(stepErrors.representativeErrors)) {
          const repIndex = stepErrors.representativeErrors.findIndex(
            (e) => e && Object.keys(e).length > 0,
          );
          if (repIndex !== -1) {
            const field = Object.keys(stepErrors.representativeErrors[repIndex])[0];
            setTimeout(() => scrollToErrorField(`rep-${repIndex}-${field}`), 350);
            setIsSubmitting(false);
            return;
          }
        }

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        if (stepErrors.addresses && typeof stepErrors.addresses === "object") {
          const typeKeys = Object.keys(stepErrors.addresses).filter((k) => k !== "_error");
          const firstType = typeKeys.find(
            (t) => stepErrors.addresses[t] && Object.keys(stepErrors.addresses[t]).length > 0,
          );
          if (firstType) {
            const fieldKeys = Object.keys(stepErrors.addresses[firstType]).filter(
              (k) => k !== "base",
            );
            const firstField = fieldKeys[0];
            if (firstField) {
              setTimeout(() => scrollToErrorField(`addresses.${firstType}.${firstField}`), 350);
              setIsSubmitting(false);
              return;
            }
          }
        }

        // ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏´‡∏≤‡πÑ‡∏î‡πâ
        const targetKey = stepFirstKey || Object.keys(stepErrors)[0];
        if (targetKey) {
          setTimeout(() => {
            scrollToErrorField(targetKey);
          }, 350);
        }
      }
      setIsSubmitting(false);
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö consent ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å validation ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    if (!consentAgreed) {
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£", {
        duration: 4000,
      });
      // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á consent
      setTimeout(() => {
        const consentBox = document.querySelector("[data-consent-box]");
        if (consentBox) {
          consentBox.scrollIntoView({ behavior: "smooth", block: "center" });
        }
      }, 100);
      setIsSubmitting(false);
      return;
    }

    console.log("‚úÖ Final validation passed, proceeding with submission");
    setIsSubmitting(true);

    try {
      let result;
      if (rejectionId) {
        console.log("üîÑ Resubmitting rejected application (v2 - no Reject_DATA):", rejectionId);
        const res = await fetch(
          `/api/membership/rejected-applications-v2/ac/${rejectionId}/resubmit`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token") || ""}`,
            },
            body: JSON.stringify({
              formData: formData,
              userComment: userComment,
            }),
          },
        );

        if (!res.ok) {
          throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        }

        result = await res.json();
      } else {
        console.log("üîÑ New submission (step mode)");
        result = await submitACMembershipForm(formData);
      }

      if (result.success) {
        console.log("‚úÖ Final submission successful");
        if (!rejectionId) {
          await deleteDraftByTaxId(formData.taxId, "ac");
        }
        // ‡πÅ‡∏™‡∏î‡∏á Success Modal ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ redirect ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        setSubmissionResult(result);
        setShowSuccessModal(true);
        // ‚úÖ ‡∏õ‡∏¥‡∏î loading overlay ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        setIsSubmitting(false);
      } else {
        console.log("‚ùå Final submission failed:", result.message);
        setIsSubmitting(false);
        toast.error(result.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }
    } catch (error) {
      console.error("üí• Final submission error:", error);
      setIsSubmitting(false);

      let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
      if (error.message) {
        errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`;
      }

      toast.error(errorMessage, { duration: 5000 });
    } finally {
      setIsSubmitting(false);
    }
  };

/**
 * Handle previous step
 */
export const createHandlePrevious = (handlePrevStep) => (e) => {
  if (e) {
    e.preventDefault();
    e.stopPropagation();
  }

  handlePrevStep();
};
