// services/thailandAddressService.js
// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API Route ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ Next.js (‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô CORS) ‡∏û‡∏£‡πâ‡∏≠‡∏° Performance Optimization

// Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏•‡∏î API calls)
const searchCache = new Map();
const CACHE_EXPIRE_TIME = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á cache key
function getCacheKey(query, type) {
  return `${type}:${query.toLowerCase().trim()}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö cache ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
function cleanExpiredCache() {
  const now = Date.now();
  for (const [key, data] of searchCache.entries()) {
    if (now - data.timestamp > CACHE_EXPIRE_TIME) {
      searchCache.delete(key);
    }
  }
}

// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏• (‡∏û‡∏£‡πâ‡∏≠‡∏° cache ‡πÅ‡∏•‡∏∞ optimization)
export async function searchBySubdistrict(query, abortSignal) {
  try {
    if (!query || query.trim().length < 2) {
      return [];
    }

    const cacheKey = getCacheKey(query, 'subdistrict');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
    const cached = searchCache.get(cacheKey);
    if (cached && (Date.now() - cached.timestamp) < CACHE_EXPIRE_TIME) {
      console.log('üìã Using cached result for:', query);
      return cached.data;
    }

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î cache ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ó‡∏∏‡∏Å 10 requests)
    if (searchCache.size > 0 && Math.random() < 0.1) {
      cleanExpiredCache();
    }

    console.log('üîç Searching API for subdistrict:', query);
    
    const response = await fetch(
      `/api/thailand-address?query=${encodeURIComponent(query)}&type=subdistrict`,
      { 
        signal: abortSignal,
        headers: {
          'Cache-Control': 'public, max-age=300', // 5 minutes browser cache
        }
      }
    );
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    
    if (result.success) {
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô cache
      searchCache.set(cacheKey, {
        data: result.data,
        timestamp: Date.now()
      });
      
      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î cache ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      if (searchCache.size > 100) {
        const firstKey = searchCache.keys().next().value;
        searchCache.delete(firstKey);
      }
      
      return result.data;
    } else {
      console.error('API Error:', result.error);
      return [];
    }

  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('üö´ Request aborted for subdistrict:', query);
      return [];
    }
    console.error('Error searching subdistrict:', error);
    return [];
  }
}

// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå (‡∏û‡∏£‡πâ‡∏≠‡∏° cache ‡πÅ‡∏•‡∏∞ optimization)
export async function searchByPostalCode(query, abortSignal) {
  try {
    if (!query || query.trim().length < 3) {
      return [];
    }

    const cacheKey = getCacheKey(query, 'postalCode');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
    const cached = searchCache.get(cacheKey);
    if (cached && (Date.now() - cached.timestamp) < CACHE_EXPIRE_TIME) {
      console.log('üìã Using cached result for postal code:', query);
      return cached.data;
    }

    console.log('üîç Searching API for postal code:', query);

    const response = await fetch(
      `/api/thailand-address?query=${encodeURIComponent(query)}&type=postalCode`,
      { 
        signal: abortSignal,
        headers: {
          'Cache-Control': 'public, max-age=300', // 5 minutes browser cache
        }
      }
    );
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    
    if (result.success) {
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô cache
      searchCache.set(cacheKey, {
        data: result.data,
        timestamp: Date.now()
      });
      
      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î cache
      if (searchCache.size > 100) {
        const firstKey = searchCache.keys().next().value;
        searchCache.delete(firstKey);
      }
      
      return result.data;
    } else {
      console.error('API Error:', result.error);
      return [];
    }

  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('üö´ Request aborted for postal code:', query);
      return [];
    }
    console.error('Error searching postal code:', error);
    return [];
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö API (‡πÉ‡∏ä‡πâ cache)
export async function testConnection() {
  try {
    const cacheKey = 'api_test_connection';
    const cached = searchCache.get(cacheKey);
    
    // ‡πÉ‡∏ä‡πâ cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö API (1 ‡∏ô‡∏≤‡∏ó‡∏µ)
    if (cached && (Date.now() - cached.timestamp) < 60000) {
      return cached.data;
    }

    const response = await fetch('/api/thailand-address?query=‡∏ö‡∏≤‡∏á&type=subdistrict');
    const result = await response.json();
    
    const isSuccess = result.success && result.data.length > 0;
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô cache
    searchCache.set(cacheKey, {
      data: isSuccess,
      timestamp: Date.now()
    });
    
    if (isSuccess) {
      console.log('‚úÖ API Connection successful!', result.data.slice(0, 2));
      return true;
    } else {
      console.warn('‚ö†Ô∏è API returned no data');
      return false;
    }
  } catch (error) {
    console.error('‚ùå API Connection failed:', error);
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á cache (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤)
export function clearCache() {
  searchCache.clear();
  console.log('üóëÔ∏è Cache cleared');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ cache (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤)
export function getCacheStats() {
  return {
    size: searchCache.size,
    keys: Array.from(searchCache.keys())
  };
}